{"version":3,"sources":["serviceWorker.js","components/Home.js","actions/createInterview.js","components/Create.js","components/Navbar.js","actions/deleteInterview.js","components/List.js","components/Show.js","actions/updateInterview.js","components/Edit.js","actions/getInterviews.js","App.js","reducers/rootReducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","React","createElement","newInterview","data","type","connect","state","Component","constructor","super","arguments","this","createInterview","e","preventDefault","date","target","elements","value","start","end","title","participants","props","dispatch","JSON","stringify","participantlist","fetch","method","headers","Content-Type","body","then","response","json","code","alert","catch","error","createInterviewAction","render","id","onSubmit","name","className","placeholder","Navbar","href","delete_interview","interviews","deleteInterview","content-type","res","console","log","map","interview","key","onClick","bind","style","background","border","color","textDecoration","cursor","mapStateToProps","ownProps","params","find","toString","par","email","editInterview","updateInterview","defaultValue","split","pop","x","join","getAllInterviews","componentDidMount","results","BrowserRouter","Route","exact","path","component","Create","List","Show","Edit","initState","rootReducer","length","undefined","action","newInterviews","push","filter","store","createStore","applyMiddleware","thunk","AppStore","Provider","App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd7e222c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to Interview Scheduler.</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export function createInterviewAction(date, start, end, title, participants) {\r\n  return dispatch => {\r\n    let data = JSON.stringify({\r\n      date: date,\r\n      start: start,\r\n      end: end,\r\n      title: title,\r\n      participantlist: participants\r\n    });\r\n    let url = \"http://localhost:3001/api/v1/interviews/\";\r\n    return fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: data\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.code === 3000) {\r\n          alert(\"There is an overlap in date and time\");\r\n        } else {\r\n          dispatch(newInterview(data));\r\n          alert(\"The Interview is created\");\r\n        }\r\n      })\r\n      .catch(error => {\r\n        alert(\"Error:\", error);\r\n      });\r\n  };\r\n}\r\n\r\nconst newInterview = data => ({ type: \"NEW_INTERVIEWS\", data: data });\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createInterviewAction } from \"../actions/createInterview\";\r\nclass Create extends Component {\r\n  createInterview = e => {\r\n    e.preventDefault();\r\n    const date = e.target.elements.date.value;\r\n    const start = e.target.elements.start.value;\r\n    const end = e.target.elements.end.value;\r\n    const title = e.target.elements.title.value;\r\n    const participants = e.target.elements.participants.value;\r\n    this.props.dispatch(\r\n      createInterviewAction(date, start, end, title, participants)\r\n    );\r\n  };\r\n  render() {\r\n    const jsx = (\r\n      <div>\r\n        <h2>Create Interview</h2>\r\n        <form id=\"create-interview\" onSubmit={this.createInterview}>\r\n          <label>Interview Date</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            className=\"form-control\"\r\n            id=\"date\"\r\n          ></input>\r\n          <label>Start time</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"start\"\r\n            className=\"form-control\"\r\n            id=\"start\"\r\n          ></input>\r\n          <label>End time</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"end\"\r\n            className=\"form-control\"\r\n            id=\"end\"\r\n          ></input>\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n          ></input>\r\n          <label>Participants</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"participants\"\r\n            className=\"form-control\"\r\n            id=\"participants\"\r\n            placeholder=\"Separate the participant ids by comma\"\r\n          ></input>\r\n          <button type=\"submit\" name=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n    return jsx;\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {};\r\n};\r\nexport default connect(mapStateToProps)(Create);\r\n","import React from \"react\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div>\r\n      <ul className=\"right\">\r\n        <li>\r\n          <a href=\"/\">Home</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/create\">Create Interview</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/list\">Show All Interviews</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","export function deleteInterview(id) {\r\n  return dispatch => {\r\n    let url = \"http://localhost:3001/api/v1/interviews/\" + id;\r\n    return fetch(url, {\r\n      method: \"DELETE\",\r\n      headers: { \"content-type\": \"application/json\" }\r\n    })\r\n      .then(res => {\r\n        if (res.json()) {\r\n          dispatch(delete_interview(id));\r\n        }\r\n      }) // OR res.json()\r\n      .then(res => console.log(res));\r\n  };\r\n}\r\n\r\nconst delete_interview = data => ({ type: \"DELETE_INTERVIEW\", data: data });\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteInterview } from \"../actions/deleteInterview\";\r\n\r\nclass List extends Component {\r\n  deleteInterview = id => {\r\n    this.props.dispatch(deleteInterview(id));\r\n    alert(\"Delete Successful\");\r\n  };\r\n  render() {\r\n    const jsx = (\r\n      <div>\r\n        <h1>Interviews Scheduled</h1>\r\n        {this.props.interviews.map(interview => (\r\n          <div key={interview.id}>\r\n            <h3>{interview.title}</h3>\r\n            <ul>\r\n              <li>Date : {interview.date}</li>\r\n              <li>Start Time : {interview.start}</li>\r\n              <li>End Time : {interview.end}</li>\r\n              <li>\r\n                <a href={\"/show/\" + interview.id}>Show</a>\r\n              </li>\r\n              <li>\r\n                <a href={\"/edit/\" + interview.id}>Edit</a>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={this.deleteInterview.bind(this, interview.id)}\r\n                  style={{ background: \"none\", border: \"none\", color: \"blue\", textDecoration: \"underline\", cursor: \"pointer\" }}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n    return jsx;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    interviews: state.interviews\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(List);\r\n\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Show extends Component {\r\n  render() {\r\n    if (!this.props.interview) {\r\n      return <div>Loading . . . </div>;\r\n    } else {\r\n      const jsx = (\r\n        <div>\r\n          {/* <h1>Interview is shown here</h1>  */}\r\n          <h2> Title : {this.props.interview.title}</h2>\r\n          <h3> Date : {this.props.interview.date}</h3>\r\n          <h3> Start time : {this.props.interview.start}</h3>\r\n          <h3> End time : {this.props.interview.end} </h3>\r\n          <h3> Participants : </h3>\r\n          <ul>\r\n            {this.props.interview.participants.map(par => {\r\n              return <li key={par.id}>{par.email}</li>;\r\n            })}\r\n          </ul>\r\n        </div>\r\n      );\r\n      return jsx;\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let { id } = ownProps.match.params;\r\n  // console.log(id);\r\n  // console.log(state.interviews.find(interview => interview.id.toString() === id))\r\n  return {\r\n    interview: state.interviews.find(\r\n      interview => interview.id.toString() === id.toString()\r\n    )\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Show);\r\n","export function updateInterview(id, date, start, end, title, participants) {\r\n  return dispatch => {\r\n    let data = JSON.stringify({\r\n      date: date,\r\n      start: start,\r\n      end: end,\r\n      title: title,\r\n      participantlist: participants\r\n    });\r\n    let url = \"http://localhost:3001/api/v1/interviews/\" + id;\r\n    return fetch(url, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: data\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.code === 3000) {\r\n          alert(\"There is an overlap in date and time\");\r\n        } else {\r\n          dispatch(editInterview(data));\r\n          alert(\"The Interview is updated\");\r\n        }\r\n      })\r\n      .catch(error => {\r\n        alert(\"Error:\", error);\r\n      });\r\n  };\r\n}\r\n\r\nconst editInterview = data => ({ type: \"EDIT_INTERVIEWS\", data: data });\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateInterview } from \"../actions/updateInterview\";\r\nclass Edit extends Component {\r\n  updateInterview = e => {\r\n    e.preventDefault();\r\n    const date = e.target.elements.date.value;\r\n    const start = e.target.elements.start.value;\r\n    const end = e.target.elements.end.value;\r\n    const title = e.target.elements.title.value;\r\n    const participants = e.target.elements.participants.value;\r\n    const { id } = this.props.match.params;\r\n    this.props.dispatch(\r\n      updateInterview(id, date, start, end, title, participants)\r\n    );\r\n  };\r\n  render() {\r\n    if (!this.props.interview) {\r\n      return <div> Loading ... </div>;\r\n    } else {\r\n      const jsx = (\r\n        <div>\r\n          <h2>Update interview</h2>\r\n          <form id=\"create-interview\" onSubmit={this.updateInterview}>\r\n            <label>Interview Date</label>\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              className=\"form-control\"\r\n              id=\"date\"\r\n              defaultValue={this.props.interview.date}\r\n            ></input>\r\n            <label>Start time</label>\r\n            <input\r\n              type=\"time\"\r\n              name=\"start\"\r\n              className=\"form-control\"\r\n              id=\"start\"\r\n              defaultValue={\r\n                this.props.interview.start\r\n                  .split(\"T\")\r\n                  .pop()\r\n                  .split(\"Z\")[0]\r\n              }\r\n            ></input>\r\n            <label>End time</label>\r\n            <input\r\n              type=\"time\"\r\n              name=\"end\"\r\n              className=\"form-control\"\r\n              id=\"end\"\r\n              defaultValue={\r\n                this.props.interview.end\r\n                  .split(\"T\")\r\n                  .pop()\r\n                  .split(\"Z\")[0]\r\n              }\r\n            ></input>\r\n            <label>Title</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              className=\"form-control\"\r\n              id=\"title\"\r\n              defaultValue={this.props.interview.title}\r\n            ></input>\r\n            <label>Participants</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"participants\"\r\n              className=\"form-control\"\r\n              id=\"participants\"\r\n              defaultValue={this.props.interview.participants\r\n                .map(x => x.email)\r\n                .join()}\r\n            ></input>\r\n            <button type=\"submit\" name=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      );\r\n      return jsx;\r\n    }\r\n  }\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     editInterview: interview => {\r\n//       dispatch({ type: \"EDIT_INTERVIEW\", data: interview });\r\n//     }\r\n//   };\r\n// };\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let { id } = ownProps.match.params;\r\n  // console.log(id);\r\n  console.log(\r\n    state.interviews.find(interview => interview.id.toString() === id)\r\n  );\r\n  return {\r\n    interview: state.interviews.find(\r\n      interview => interview.id.toString() === id\r\n    )\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Edit);\r\n","export function getInterviews() {\r\n    return dispatch => {\r\n        return fetch('http://localhost:3001/api/v1/interviews')\r\n        .then(results => {\r\n          return results.json();\r\n        }).then(data => {\r\n            dispatch(getAllInterviews(data))\r\n        })\r\n    }\r\n}\r\nconst getAllInterviews= data => ({type : \"GET_ALL_INTERVIEWS\",data: data})","import React, { Component } from \"react\";\r\nimport { Route, BrowserRouter } from \"react-router-dom\";\r\nimport Home from \"./components/Home\";\r\nimport Create from \"./components/Create\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport List from \"./components/List\";\r\nimport Show from \"./components/Show\";\r\nimport Edit from \"./components/Edit\";\r\nimport { connect } from \"react-redux\";\r\nimport { getInterviews } from \"./actions/getInterviews\";\r\n\r\nclass App extends Component {\r\n  componentDidMount = () => {\r\n    this.props.dispatch(getInterviews());\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Navbar />\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/create\" component={Create} />\r\n          <Route path=\"/list\" component={List} />\r\n          <Route path=\"/show/:id\" component={Show} />\r\n          <Route path=\"/edit/:id\" component={Edit} />\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {};\r\n};\r\nexport default connect(mapStateToProps)(App);\r\n","const initState = {\r\n  interviews: []\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n  if (action.type === \"GET_ALL_INTERVIEWS\") {\r\n    return {\r\n      ...state,\r\n      interviews: action.data\r\n    };\r\n  } else if (action.type === \"NEW_INTERVIEW\") {\r\n    let newInterviews = state.interviews.push(action.data);\r\n    return {\r\n      ...state,\r\n      interviews: newInterviews\r\n    };\r\n  } else if (action.type === \"EDIT_INTERVIEW\") {\r\n    // console.log(action.data);\r\n    let newInterviews = state.interviews\r\n      .filter(\r\n        interview => interview.id.toString() !== action.data.id.toString()\r\n      )\r\n      .push(action.data);\r\n    return {\r\n      ...state,\r\n      interviews: newInterviews\r\n    };\r\n  } else if (action.type === \"DELETE_INTERVIEW\") {\r\n    let newInterviews = state.interviews.filter(\r\n      interview => interview.id.toString() !== action.data.toString()\r\n    );\r\n    return {\r\n      ...state,\r\n      interviews: newInterviews\r\n    };\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './App';\r\nimport rootReducer from './reducers/rootReducer.js';\r\n\r\nconst store = createStore(rootReducer,applyMiddleware(thunk));\r\nconst AppStore = () => (\r\n    <Provider store = {store}> \r\n<App /> \r\n</Provider>\r\n);\r\n\r\nReactDOM.render(<AppStore/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}